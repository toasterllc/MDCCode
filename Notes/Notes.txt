- Business

    - Order small additional quantity (8-16) of 16 MHz clock chips (DigiKey)
    
    - Order solder balls (DigiKey / AliExpress)
        https://www.aliexpress.us/item/3256802494887154.html?algo_pvid=7bfa36e2-aa88-4fe4-b23b-5635443e5e60
        https://www.digikey.com/en/products/detail/chip-quik-inc/SMD2024-25000/9558182
    
    - Order mass quantity
        - Small signal mosfets
            https://www.arrow.com/en/products/dmg2305ux-7/diodes-incorporated
                DMG2305UX
                $0.0432 @ 1000
                Vt_max = 0.9 V
                Idss = 1 µA
            https://www.newark.com/torex/xp231p02013r-g/mosfet-p-ch-0-2a-30v-sot-323-3a/dp/91AH9291?st=mosfet
                XP231P02013R-G
                Vt_max = 1.2 V
                Idss = 10 µA        XXX High leakage
                $0.024 @ 500
                $0.024 @ 1000
        
        - LEDs
        - Tactile switches (LCSC)
        - Orings (Grainger / AliExpress?)
            13.5mm OD / 11.5mm ID
                Hardness: 70A (medium hard)
                Thickness: 1mm
                https://www.grainger.com/category/hardware/o-rings-and-o-ring-kits/o-rings?attrs=Nominal+Outside+Dia.%7C13.5+mm~~System+of+Measurement%7CMetric&filters=attrs
                $17.06 / 100
            
            14mm OD / 12mm ID
                Hardness: 50A (soft)
                Thickness: 1mm
                https://www.mcmaster.com/1174N103/
                $51.52 / 100
                
                *** This seems better than the 13.5mm one because it's softer, so it should block light better.
                *** But it's more expensive, and we'll need to change the enclosure slightly because its larger OD.
        
        - Screws for mounting PCB (AliExpress)
        - Lenses
        - Lens holder (if we end up needed them)
        - Battery
        - Battery wire header
        - Battery wire housing (goes into header/receptacle)
            - Only if battery supplier can't attach proper connector to battery
        
        √ SD cards
            √ Samsung PRO Endurance 128 GB MB-MJ128KA/AM
                https://www.samsung.com/us/computing/memory-storage/memory-cards/pro-endurance-adapter-microsdxc-128gb-mb-mj128ka-am/
                $16.99 each
                https://www.samsung.com/us/business/computing/memory-storage/memory-cards/pro-endurance-adapter-microsdxc-128gb-mb-mj128ka-am/
                $15.63 each @ 100
                X Try using promo code (see SD card manilla envelope)
                    X Didn't work
            - SanDisk MAX ENDURANCE 64 GB SDSQQVR-064G-GN6IA
                https://bulkmemorycards.com/shop/microsd-cards/microsd-64gb/microsd-64gb-class-10/microsd-64gb-class-10-w-sd-adapter/64gb-sandisk-max-endurance-microsdxc-memory-card-sdsqqvr-064g-gn6ia/
                $15.30 @ 100
        
        √ MSP430FR2433 (110x)
        √ TXB0102YZP (110x)
        √ TPS62A01DRLR (350x) from ti.com
            √ Waiting for tax exemption to be accepted
        √ USB-C receptacle


- Rev7 Software / Firmware Todo
    
    - MSPApp: reduce current consumption when motion sensor is asserting that there's motion
        - Immediately upon the motion interrupt, replace the pull-down resistor with a pull-up
          resistor, and only re-enable the pull-down resistor when we're ready for motion again
        
        - Currently it consumes 100 uA while there's motion, due to the pull-down resistor
            - Do we ignore it because in Rev7, we'll disable the motion sensor when we don't need it anyway,
              and when we do need it, we end up using a lot more current, so the 100µA is negligable anyway?
    
    - MSPApp: abort times seem to be wrong -- they have bit 0x40000000000000 set for some reason:
          eventsCount:             3
          events[0]
            timestamp:             0x40000000001d38
            domain:                4
            line:                  379
          events[1]
            timestamp:             0x40000000001d5f
            domain:                4
            line:                  379
          events[2]
            timestamp:             0x40000000001d9a
            domain:                4
            line:                  379
    
    - SDController.v: remove old LVS stuff -- Init_ClockPulseUs, init_delayCounter, etc
    
    - MSPApp: disable SysTick if no one is waiting on a Sleep() or Delay()
        - This way, when we need to sleep long periods of time (ie waiting for a specific wall time),
          we can use a timer peripheral to wake ourself and ensure we don't unnecessarily wake intermittently
    
    - Switch ACLK to be sourced by XT1, so that TimerA can be sourced by ACLK/XT1, so that we can wake ourselves with a high-accuracy clock
        - Does this present a problem with Clock.h? IN Clock.h, we switched the ACLK source from XT1->REFOCLK, but why did we do that?
          Was sourcing ACLK from XT1 delaying startup for some reason?
    
    - ICEApp: update Pins.pcf (ICE40 pins changed on Rev7!)
    
    - MSPApp: can we save power by holding IMG in reset while writing to SD card?
    
    - MSPApp: Disable SD's DAT3 pullup by sending it the appropriate command, to help with signal integrity
        ACMD42 / SET_CLR_CARD_DETECT
    
    - MSPApp: while running on battery power with CurrentRanger monitoring, after some time the current
      consumption jumped from ~8µA to ~150µA, apparently not due to motion. Was this due to RTC timer
      waking us up? If so, why didn't we go back to sleep into LPM3.5?
    
    - MSPApp: store oldest 3 aborts, and newest 3 aborts (currently we only store the oldest 3 aborts)
    
    - MDCStudio: add inspector sidebar
    
    - MSPApp: Improve exposure/gain algs
    
    - MSPApp: Optimize battery usage
        - Measure current during with various rails enabled and make sure it's what we expect
        - Currently we keep VDD_B on all the time!
    
    - Make sure that IMG i2c lines are 0V while IMG power is off
        - On Rev4, ImgI2CMaster.v writes clkOut<=1 in its Idle state, so it's being driven when IMG is powered off
    
    - Patch icepack to specify frequency=high in bitstream
        - Doesn't look like there's a way to specify that in the command line options
    
    - Replace uses of RefCounted with just std::shared_ptr with a custom deleter?
      For example, there's no need to make syscalls to retain/release an io_service_t,
      when we can just use regular memory management right?
    
    - MDCStudio/STMApp: Implement battery voltage monitoring
    
    - ImagePipeline: improve perf so that we process each thumbnail in realtime to avoid slowing image loading more than the data transfer speed
        - Ie, make sure the bottleneck remains the data transfer
            - We transfer data at 42525582 bytes/sec -> /373760 == 113.778 thumbnails/sec -> 1/113.778 == 8.789 ms/thumbnail
            - Therefore ImagePipeline needs to process every image in less than 8.789ms
            - Currently ImagePipeline takes 9-12ms per thumbnail
        
        - ImagePipeline bottlenecks appear to be:
            - FFCC (takes 9.8 ms / thumbnail)
            - LMMSE (1.2 ms / thumbnail)
            - Remainder of ImagePipeline (2 ms / thumbnail)
            - Checksum validation (0.429687 ms / thumbnail)
    
    - ImagePipeline: FFCC:
        - Create new training set
            - Use color checker with known colors
                - We could either:
                    - Measure the colors ourself, or
                    - Use a colorchecker with guaranteed colors

            - Capture lots of different lighting conditions

            - Capture images with the color checker illuminated by the primary illuminant (ie not in a shadow)

            - Black-out color checker in images

            - Ensure there aren't common elements in each image (eg Sue holding the color checker)
    
    - ImagePipeline: Improve highlight reconstruction
        - In some cases HR makes some regions worse than if it didn’t kick in at all
        - Highlights in the sky can be particularly bad -- it replaces large regions with blocks of white. 
    
    - ImagePipeline: Re-calculate color correction matrices
        - Use real color checker
        - Use a spectrometer to measure color checker squares
        - Remember that our current CCMs are calculated by averaging the identity matrix with the calculated CCM
            - We did this because it improves the output (at least when using our laser-jet printout of the colorchecker)
    
        - We should have more than 2 CCMs, and interpolate between the 2 that are the closest match
          to a illuminant (as determined by the illuminant estimation algorithm)
    
    - ImagePipeline: Implement auto exposure / exposure correction in image pipeline
        - Determine the distribution of pixel brightness, and apply some function to spread out the
          brightness distribution across the entire range
        - See:
            https://twitter.com/CSProfKGD/status/1374463703345590272
            https://github.com/mahmoudnafifi/Exposure_Correction
    
    - ImagePipeline: Correct fixed-pattern noise
        http://www.moria.de/tech/image-sensors/preparation/
        - Saved as "ImageSensors-NoiseFiltering.webarchive"
        - If you set inttime=0, fixed pattern noise seems to be maximized
    
    - ImagePipeline: Implement dead pixel correction
    
    - MDCStudio: ImageGridView: thumbnail resize
        - Use LayerScrollView -magnifyIncrease: / -magnifyDecrease: interface
        - Add slider somewhere?
    
    - MDCStudio: ImageGridView: allow arrow keys to extend the current selection when holding shift/command
        - We need sophisticated handling similar to the Finder, but we should be able to do better
    
    - MDCStudio: image rotation
        - from grid view
        - from image view
    
    - MDCStudio: ImageGridView: allow enter key to open image
    
    - MDCStudio: ImageGridView: zoom animation when entering image view
    
    - MDCStudio: image exporting
    
    - MDCStudio: image drag/drop
        - to other apps
        - to existing library
        - to new library
    
    - MDCStudio: deleting images
        - show per-device trash can when images are deleted
    
    - MDCStudio: implement inspector
    
    - STMApp: occasionally aborts in _SDInit -> USBSendStatus() because the endpoint isn't ready
        - Haven't been able to determine cause yet
    
    - STMApp: reconsider whether we should be using Task::Stop() to abort tasks that are in progress.
      for example, a task might be in the middle of executing SDCard::Disable(), which isn't designed to be aborted half way through
    
    - MSPApp: make sure SysTick (WDT) doesn't wake us from LPM3.5
    
    - Test _State.img.ringBuf/_State.img.ringBuf2 resiliency to power loss
    
    - STMApp: enumeration failed in this scenario: MDC plugged in -> comp sleep -> comp wake -> "invalid endpoint 0x81"
    
    - Task.h: debug feature: stack traces
    
    - MSPApp: can we use the 'restart' facility of reset_register to speed up integration time changes?
        - 'restart' triggers a bad frame, so experiment with the 'restart_bad' and 'mask_bad' flags too
    
    - Fix bug: Without STLink connected, sometimes STApp crashes when plugging in
        - One cause is because Img::Sensor::Init() failed, because of an IMG I2C error
            - Might be because we're not waiting long enough after turning on the power rails to do I2C comms
                - "#warning TODO: measure how long it takes for IMG rails to rise"
    
    
    
    
    
    
    √ MSPApp: make abort tracking track classes of events that occur, rather than each individual event
        - Each event should track:
            Domain
            Line
            EarliestTimestamp
            LatestTimestamp
            Count
    
    √ MSPApp: root cause these aborts that occurred during battery test #1 (scratch/Rev6/BatteryLifeTest 90ec322)
          eventsCount:             3
          events[0]
            timestamp:             0x923e
            domain:                3
            line:                  318
          events[1]
            timestamp:             0x1f109
            domain:                3
            line:                  318
          events[2]
            timestamp:             0x56ec7
            domain:                3
            line:                  318
          
          √ Maybe we need to reset SPI comms between ICE::Init() attempts?
              √ Implemented this, no evidence that it did or didn't solve the problem, so if it occurs again we need to revisit
    
    X We're getting SD card timeouts:
        domain:                4
        line:                  379
        
        X Hasn't occurred in a while
    
    X MSPApp: can we save power by using SDR50 instead of SDR104?
        X No difference in current consumption observed with Samsung Pro Endurance 128 GB
    
    X MSPApp: can we save power by limiting current limit without lengthening write duration?
        X No difference in current consumption observed with Samsung Pro Endurance 128 GB
    
    √ SDController: clean up handling of 3V3 initialization
