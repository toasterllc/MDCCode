- Future
    
    - USB Throughput, revisted:
        - Could we use the DMA "Double-buffer mode" to avoid CPU intervention between sending 64k chunks?
    
    - USB Throughput: Try to optimize USB throughput beyond 355e6 bits/sec
        - Does the USB hub limit the data throughput?
        - Perf debugging tactic: check how often the DIEPINT.NAK interrupt occurs when sending mass data to the
          host (signifying the host requesting data, but the device saying it doesn't have any)
        - Sometimes the USB Tx FIFO is empty -- we're not filling it fast enough
        - Try speeding up USB transfers by trying different values of GAHBCFG.HBSTLEN
        - When we're done sending a transfer, the ST APIs have to call out to our user code.
            - Not sure if this can be improved when DMA=1, since we can only send data from a single address at a time?
            - When DMA=0, couldn't this be improved, since we can get an interrupt when the TXFIFO is half-full,
              and start enqueueing more data from an arbitrary address?
    
    - Consider switching to a different PMOS power transistor that has ESD protection
        - Currently, our MOSFETs don't have ESD protection, so the ones that face external ports need discrete protection,
          such as the ones in the reverse polarity protection subcircuit
        
        - For example:
            - PMPB15XP
                - 1.5 kV ESD protection
                - rRDS = 19mΩ
            
            - PMPB20XPE
                - 2.4 kV ESD protection
                - rRDS = 23.5mΩ
    
    - Consider using a HyperRAM instead of SDRAM
        - Pros:
            - Fewer pins: only 24 pins instead of 54 SDRAM pins
            - Doesn't need explicit refreshes, which simplifies RAMController Verilog
            - Appears to have lower power consumption
                - HyperRAM W956D8MBYA: 25 mA @ 200 MHz, VCC=2.0V
                - AS4C8M16MSA SDRAM: 75 mA @ ? MHz, VCC=1.8V
                - W989D6DBGX6I: 75 mA @ ? MHz, VCC=1.8V
        
        - Cons:
            - Requires DDR signals to operate
            - Unsure if ICE40 DDR outputs can operate fast enough
                - Image sensor output = 12 bits @ 98 MHz == 1.176e9 bits/sec
                - Clock setups:
                    - Scheme50: HyperRAM clock @ 50 MHz -> 50e6 * 8 (bits per transfer) * 2 (transfers per clock) == .8e9 bits/sec (🚫 not fast enough)
                        - DDR signals switch at 2x -> 100 MHz
                    - Scheme75: HyperRAM clock @ 75 MHz -> 75e6 * 8 (bits per transfer) * 2 (transfers per clock) == 1.2e9 bits/sec (👍 fast enough)
                        - DDR signals switch at 2x -> 150 MHz (😬 not sure if ICE40 DDR outputs can switch this fast)
                            - See "Maximum sysIO Buffer Performance" below
                    - Scheme90: HyperRAM clock @ 90 MHz -> 90e6 * 8 (bits per transfer) * 2 (transfers per clock) == 1.44e9 bits/sec (👍 fast enough)
                        - DDR signals switch at 2x -> 180 MHz (😬 not sure if ICE40 DDR outputs can switch this fast)
                            - See "Maximum sysIO Buffer Performance" below
                - Even if we can squeak by with Scheme75/Scheme90 with 12-bit pixels, we probably couldn't with 14-bit pixels (which we might want to some day)
                - From the "iCE40 LP/HX Family Data Sheet":
                    - Maximum sysIO Buffer Performance:
                        - LVCMOS18: 155 MHz
                            - Therefore, don't feel confident that we can DDR outputs at more than 155 MHz
    
    - An eMMC (such as iNAND 7250, see datasheet in notes dir) might consume less power / be more reliable than an SD card. We can likely write to them faster (and maybe initialize them faster), so even if their current usage is higher, they may end up using less energy for the same operation if we can get the operation completed faster than with an SD card.
